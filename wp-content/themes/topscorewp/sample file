// add_filter('woocommerce_quantity_input_args', 'set_readonly_quantity_for_virtual_downloadable', 10, 2);

// function set_readonly_quantity_for_virtual_downloadable($args, $product) {
//     // Check if the product is virtual and downloadable
//     if ($product->is_virtual() && $product->is_downloadable()) {
//         $args['input_value'] = 1; // Default quantity
//         $args['min_value'] = 1; // Minimum quantity
//         $args['max_value'] = 1; // Maximum quantity
//         $args['readonly'] = true; // Make the field readonly
//     }
//     return $args;
// }

// // Remove quantity field on the single product page for virtual and downloadable products
// add_filter('woocommerce_is_sold_individually', 'remove_quantity_for_virtual_downloadable', 10, 2);
// function remove_quantity_for_virtual_downloadable($is_sold_individually, $product) {
//     if ($product->is_virtual() && $product->is_downloadable()) {
//         return true; // Treat as sold individually
//     }
//     return $is_sold_individually;
// }

// // Hide quantity field in the cart for virtual and downloadable products
// add_filter('woocommerce_cart_item_quantity', 'hide_quantity_in_cart_for_virtual_downloadable', 10, 3);
// function hide_quantity_in_cart_for_virtual_downloadable($product_quantity, $cart_item_key, $cart_item) {
//     $product = $cart_item['data'];
//     if ($product->is_virtual() && $product->is_downloadable()) {
//         return ''; // Return empty string to remove quantity field
//     }
//     return $product_quantity;
// }

// // Disable quantity field at checkout for virtual and downloadable products
// add_filter('woocommerce_checkout_cart_item_quantity', 'disable_quantity_at_checkout', 10, 3);
// function disable_quantity_at_checkout($quantity_html, $cart_item, $cart_item_key) {
//     $product = $cart_item['data'];
//     if ($product->is_virtual() && $product->is_downloadable()) {
//         return ''; // Remove quantity from checkout
//     }
//     return $quantity_html;
// }


// Ensure the quantity is always set to 1 for virtual and downloadable products
add_filter('woocommerce_quantity_input_args', 'set_readonly_quantity_for_virtual_downloadable', 10, 2);
function set_readonly_quantity_for_virtual_downloadable($args, $product) {
    if ($product->is_virtual() && $product->is_downloadable()) {
        $args['input_value'] = 1; // Set default quantity to 1
        $args['min_value'] = 1; // Minimum quantity
        $args['max_value'] = 1; // Maximum quantity
        $args['readonly'] = true; // Add readonly attribute
    }
    return $args;
}

// Disable plus and minus buttons via JavaScript
add_action('wp_footer', 'disable_quantity_buttons_for_virtual_downloadable');
function disable_quantity_buttons_for_virtual_downloadable() {
    if (is_product() || is_cart()) { // Apply on product and cart pages
        ?>
        <script type="text/javascript">
            jQuery(function($) {
                // Disable quantity buttons for readonly fields
                $('input.qty[readonly]').siblings('.plus, .minus').addClass('disabled').prop('disabled', true);

                // Optional: Add styles to visually indicate disabled state
                $('.plus.disabled, .minus.disabled').css({
                    'opacity': '0.5',
                    'cursor': 'not-allowed'
                });
            });
        </script>
        <?php
    }
}

// Change the "Add to Cart" button text if the product is already in the cart
add_filter('woocommerce_product_add_to_cart_text', 'change_add_to_cart_text_if_in_cart', 10, 2);
add_filter('woocommerce_product_single_add_to_cart_text', 'change_add_to_cart_text_if_in_cart', 10, 2);

function change_add_to_cart_text_if_in_cart($text, $product) {
    // Check if the product is already in the cart
    if (WC()->cart && $product->is_type('simple')) {
        foreach (WC()->cart->get_cart() as $cart_item) {
            if ($cart_item['product_id'] == $product->get_id()) {
                return __('Go to Cart', 'woocommerce'); // Change text
            }
        }
    }
    return $text;
}

// Modify Add-to-Cart URL for products in the cart (redirect to cart page)
add_filter('woocommerce_product_add_to_cart_url', 'change_add_to_cart_url_if_in_cart', 10, 2);

function change_add_to_cart_url_if_in_cart($url, $product) {
    if (WC()->cart && $product->is_type('simple')) {
        foreach (WC()->cart->get_cart() as $cart_item) {
            if ($cart_item['product_id'] == $product->get_id()) {
                return wc_get_cart_url(); // Redirect to cart page
            }
        }
    }
    return $url;
}

// Disable Add to Cart functionality for products already in the cart
add_action('woocommerce_after_shop_loop_item', 'disable_add_to_cart_button_if_in_cart', 10);
add_action('woocommerce_single_product_summary', 'disable_add_to_cart_button_if_in_cart', 30);

function disable_add_to_cart_button_if_in_cart() {
    global $product;

    if (WC()->cart && $product->is_type('simple')) {
        foreach (WC()->cart->get_cart() as $cart_item) {
            if ($cart_item['product_id'] == $product->get_id()) {
                ?>
                <script type="text/javascript">
                    jQuery(function($) {
                        // Disable the "Add to Cart" button and prevent quantity changes
                        $('button.single_add_to_cart_button').prop('disabled', true).text('Go to Cart');
                    });
                </script>
                <?php
            }
        }
    }
}
